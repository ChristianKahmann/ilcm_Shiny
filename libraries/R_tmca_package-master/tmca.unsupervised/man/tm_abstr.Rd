% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/topic_model.R
\docType{data}
\name{tm_abstr}
\alias{tm_abstr}
\title{An Abstraction 'base class' for  topic modeling algorithms.}
\format{R6Class}
\usage{
No usage examples.
}
\description{
It doesn't make sense to instantiate this class, however, no error will be thrown.
This is to imlement methods that apply to all algorithms only once (keep it DRY) and ensure the needed methods are implemented.
To implement a new Algorithm inherit from this class and implement the methods call(), input(), output() and inferTopics().
}
\section{Fields}{

\describe{
\item{\code{name}}{(private) Name of the topic modeling function to be used}

\item{\code{package}}{(private) package that contains the algorithm}
}}

\section{Methods}{

\describe{
  \item{\code{call()}}{This should execute the algorithm and save its results to the internal variable (private$model)}
  \item{\code{input(dtm = NULL)}}{ Input the training DTM, transform to the algorithm specific format and save to private$internal_representation.}
  \item{\code{output()}}{Tranform the internal representation}
  \item{\code{inferTopics(new_text=NULL)}}{Infer the topicdistribution with regards to the calculated model for yet unseen data.
              Return the document x topic matrix containing the probabilities of assignment. }
  \item{\code{set_parameters(par_list)}}{This method uses a List of named Parameters to set the appropriate values of the implemented algorithm.
                                         It is implemented in this class. It checks whether the input parameters are available in the implementation.
                                         It only sets the parameters if there are no mismatches. }
   \item{\code{info()}}{Returns the package and algorithm name.}
}
}

\keyword{datasets}
